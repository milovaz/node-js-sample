pipeline {
    environment {
        registry = "moeda3.azurecr.io/node-js-sample"
        service = 'nodeSample'
    }
    agent any
    tools {nodejs "node"}
    stages {
            
        stage('Git') {
          steps {
              script {
                checkoutRepository()
              }
          }
        }
        
        stage('Update artifacts') {
          steps { 
            script {
                //env.RETURN = sh returnStdout: true, script: '~/scripts/deploymicroservice -i moeda3.azurecr.io/projects:2 -s projects-dev -r 1 -p 5004:5000'
                //echo "$RETURN"
                def values = [1, 0, 0] as int[]
                def vIndex = ("$GIT_BRANCH" ==~ /dev(elop)?|(staging|relese)/) ? values.length - 1 : values.length - 2
                values[vIndex] = "$BUILD_NUMBER" as Integer
                env.NEW_VERSION = values.join('.')
            }
          }  
        }
        
        stage('Build') {
          steps{
            script {
                registry = registry + ":$NEW_VERSION"
                echo registry
            }
            /*script {
                dockerImage = docker.build registry
            }*/
          }
        }
        
        /*stage('Deploy Image') {
          steps{
             script {
                docker.withRegistry('https://moeda3.azurecr.io', 'acr-credentials') {
                dockerImage.push()
              }
            }
          }
        }
        
        stage('Deploy to service fabric') {
           steps {
                azureServiceFabricPublish applicationName: 'fabric:/nodeSample', applicationType: "nodeSampleType", azureCredentialsId: '', clientCert: "$JENKINS_HOME/cert.pem", clientKey: "$JENKINS_HOME/key_unencrypted.pem", configureType: 'fill', managementHost: 'moeda-cluster.brazilsouth.cloudapp.azure.com', manifestPath: 'infra/nodeSample/ApplicationManifest.xml', resourceGroup: '', serviceFabric: '', repositoryName: 'node-js-sample', environmentType: 'prod'
           }
        }
        
        stage('Inform Deploy') {
          steps {
            informGitDeployment(env.REPO_OWNER, env.REPO_NAME, env.DEPLOYMENT_ID)
          }  
        }*/
    }
    post {
        always {
            sendFeedbackToSlack '@thiagomilo'      
        }
    }
}
